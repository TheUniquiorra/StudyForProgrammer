* Java并发编程学习
** 学习攻略 | 如何才能学好并发编程？
*** 学好并发编程的两个方面：
**** 1、跳出来，看全景
***** 并发编程领域可以抽象成三个核心问题：分工、同步和互斥
****** 1、分工
       所谓的分工，类似于现实中一个组织完成一个项目，项目经理要拆分任务，安排合适的成员去
完成。
       在并发编程领域，你就是项目经理，线程就是项目组成员。

**** 2、钻进去，看本质





-----------------------------------------------------------
计算机cpu与多线程
进程和线程:
进程包含线程,一个进程中包含多个线程.
线程是cpu调度和分配的基本单位,进程是操作系统进行资源分配(cpu,内存,硬盘io等)的最小单位.

单核cpu:
实现多进程依靠于操作系统的进程调度算法,比如时间片轮转算法,比如有3个正在运行的程序(即三个进程),操作系统会让单核cpu轮流来运行这些进程,然后一个进程只运行2ms,这样看起来就像多个进程同时在运行,从而实现多进程.

多线程其实是最大限度的利用cpu资源.一个拥有两个线程的进程的执行时间可能比一个线程的进程执行两遍的时间还长一点,因为线程的切换也需要时间.即采用多线程可能不会提高程序的运行速度,反而会降低速度,但是对于用户来说,可以减少用户的响应时间.

多核cpu:
什么是多核cpu?多核cpu是一枚处理器中集成多个完整的计算引擎(内核).

多核cpu和单核cpu对于进程来说都是并发,并不是并行.

但是多核cpu每一个核心都可以独立执行一个线程,所以多核cpu可以真正实现多线程的并行.比如四核可以把线程1234分配给核心1234,如果还有线程567就要等待cpu的调度.线程1234属于并行;如果一会核心1停止执行线程1改为执行线程5,那线程15属于并发.

java多线程
JVM多线程与多核cpu:
java中通过多线程机制使得多个任务同时执行处理,所有的线程共享JVM内存区域main memory,而每个线程又单独的有自己的工作内存,当线程与内存区域进行交互时,数据从主存拷贝到工作内存,进而交由线程处理(操作码+操作数).

由于Java 虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的,在任何一个确定的时刻,一个处理器(对于多核处理器来说是一个内核)只会执行一条线程中的指令.所以多核cpu情况下多个线程会在多个核心上调度.
――――――――――――――――
版权声明：本文为CSDN博主「大聪哥928」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/weixin_43641651/article/details/85785257
